@mount('ft4')
module;

struct rate_limit_config {
    active: boolean = true;
	max_points: integer = 10;
    recovery_time: integer = 5000;
    points_at_account_creation: integer = 1;
}

struct auth_descriptor_config {
    max_rules: integer = 8;
    max_number_per_account: integer = 10;
}

struct module_args {
	rate_limit: rate_limit_config = rate_limit_config();
    auth_descriptor: auth_descriptor_config = auth_descriptor_config();
}

val AUTH_DESCRIPTORS_PER_ACCOUNT_UPPER_BOUND = min(
    200,
    chain_context.args.auth_descriptor.max_number_per_account
);

function get_auth_descriptor_config() = chain_context.args.auth_descriptor;

import ^.auth;
import ^.utils;
import ^.version;
import .external;

enum auth_type {
    S, M,
}

struct auth_descriptor {
    auth_type;
    args: list<gtv>;
    rules: gtv;
}

entity account {
    key id: byte_array;
}

entity account_auth_descriptor {
    id: byte_array;
    key account, id;
    index id;
    auth_type;
    args: byte_array;
    rules: byte_array;
    mutable ctr: integer;
    created: timestamp;
}

entity auth_descriptor_signer {
    key account_auth_descriptor, id: byte_array;
}

// rate limiter
entity rl_state {
    key account;
    mutable points: integer;
    mutable last_update: timestamp;
    mutable recovery_time: timestamp;
}


function add_auth_descriptor_to_account(
    account,
    auth_descriptor,
    safe: boolean = true
): account_auth_descriptor {
    require(
        (account_auth_descriptor @* { account }).size() <
            AUTH_DESCRIPTORS_PER_ACCOUNT_UPPER_BOUND,
        "Max <%d> auth descriptor count reached. Delete some before adding new ones."
            .format(AUTH_DESCRIPTORS_PER_ACCOUNT_UPPER_BOUND)
    );
    
    val id = auth_descriptor.hash();

    validate_auth_descriptor_args(auth_descriptor);
    validate_auth_descriptor_rules(auth_descriptor.rules);

    val account_auth_descriptor = create account_auth_descriptor (
        account, id,
        auth_descriptor.auth_type,
        args = auth_descriptor.args.to_gtv().to_bytes(),
        rules = auth_descriptor.rules.to_gtv().to_bytes(),
        created = latest_time(),
        ctr = 0
    );

    _add_signer(account, auth_descriptor, account_auth_descriptor, safe);
    return account_auth_descriptor;
}

function _delete_auth_descriptor(auth_descriptor: account_auth_descriptor) {
    require(auth_descriptor.account.id != auth_descriptor.id, "Can't delete initial auth descriptor");
    delete auth_descriptor_signer @* { auth_descriptor };
    delete auth_descriptor;
}

function _delete_all_auth_descriptors_exclude(auth_descriptor: account_auth_descriptor) {
    delete (ads: auth_descriptor_signer, ad: account_auth_descriptor) @* {
        ad.account == auth_descriptor.account,
        ad.id != auth_descriptor.account.id,
        ad.id != auth_descriptor.id,
        ads.account_auth_descriptor == ad
    };
    delete account_auth_descriptor @* {
       .account == auth_descriptor.account,
       .id != auth_descriptor.account.id,
       .id != auth_descriptor.id
    };
}

function create_account_with_auth(auth_descriptor): account = _create_account_with_auth(auth_descriptor, safe = true);

function _create_account_with_auth(auth_descriptor, safe: boolean = true): account {
    require(auth_descriptor.rules == GTV_NULL, "Cannot create an account with a restricted auth descriptor");
    
    var flags = get_flags(auth_descriptor);
    require("A" in flags, "The auth descriptor used to create an account must always have the 'A' flag");

    val id = auth_descriptor.hash();
    val acc = create account (id);

    add_auth_descriptor_to_account(acc, auth_descriptor, safe);

    create_rate_limiter_state_for_account(acc);
    
    return acc;
}

function get_flags(auth_descriptor) {
    return when (auth_descriptor.auth_type) {
        S -> single_sig_args.from_gtv(auth_descriptor.args.to_gtv()).flags;
        M -> multi_sig_args.from_gtv(auth_descriptor.args.to_gtv()).flags;
    };
}

/**
* Checks if an `account_auth_descriptor` has all the specified flags
*/
function has_flags(account_auth_descriptor, required_flags: list<text>): boolean {
    val flags = get_flags_from_args(account_auth_descriptor.auth_type, account_auth_descriptor.args);
    return flags.contains_all(required_flags);
}

function _add_signer(account, auth_descriptor, account_auth_descriptor, safe: boolean = true) {
    val signers = get_signers(auth_descriptor.auth_type, auth_descriptor.args.to_gtv().to_bytes());
    require(not safe or op_context.get_signers().size() >= signers.size(), "Too few transaction signers");
    for (signer in signers) {
        require(not safe or op_context.is_signer(signer), "One signer in the Auth Desc didn't sign this transaction.");
        create auth_descriptor_signer(account_auth_descriptor, id = signer);
    }
}

function _add_evm_signer(account, auth_descriptor, account_auth_descriptor) {
    for (signer in get_signers(auth_descriptor.auth_type, auth_descriptor.args.to_gtv().to_bytes())) {
        create auth_descriptor_signer(account_auth_descriptor, id = signer);
    }
}

function auth_descriptor_by_id(account, id: byte_array) = require(
    account_auth_descriptor @? { account, id },
    "Auth descriptor '%s' not found for account '%s'".format(id, account.id)
);

function account_by_id(id: byte_array) = require(
    account @? { id },
    "Account not found: '%s'".format(id)
);

function single_sig_auth_descriptor(pubkey, flags: set<text>) = auth_descriptor(
    auth_type = auth_type.S,
    args = [
        flags.to_gtv(),
        pubkey.to_gtv()
    ],
    GTV_NULL
);

function get_auth_descriptors(id: byte_array) {
    return account_auth_descriptor @* {
        .account.id == id
    } (
        get_auth_descriptor_data($.to_struct())
    );
}

function get_auth_descriptors_by_signer(account_id: byte_array, signer: byte_array) {
    return auth_descriptor_signer @* {
        .account_auth_descriptor.account.id == account_id,
        .id == signer
    } (
        get_auth_descriptor_data(.account_auth_descriptor.to_struct())
    );
}

function get_auth_descriptor_data(ad: struct<account_auth_descriptor>) {
    return (
        id = ad.id,
        account_id = ad.account.id,
        auth_type = ad.auth_type,
        args = gtv.from_bytes(ad.args),
        rules = gtv.from_bytes(ad.rules),
        created = ad.created
    );
}

function get_paginated_accounts_by_signer(id: byte_array, page_size: integer?, page_cursor: text?) {
    val before_rowid = utils.before_rowid(page_cursor);
    return auth_descriptor_signer @* {
        id,
        .rowid > (before_rowid ?: rowid(0))
    } (
        utils.pagination_result(
            data=.account_auth_descriptor.account.to_struct().to_gtv_pretty(),
            rowid=.rowid
        )
    ) limit utils.fetch_data_size(page_size); 
}

function get_paginated_accounts_by_ad_id(id: byte_array, page_size: integer?, page_cursor: text?) {
    val before_rowid = utils.before_rowid(page_cursor);
    return account_auth_descriptor @* {
        .id == id,
        .rowid > (before_rowid ?: rowid(0))
    } (
        utils.pagination_result(
            data=.account.id.to_gtv_pretty(),
            rowid=.rowid
        )
    ) limit utils.fetch_data_size(page_size);
}

function validate_auth_descriptor_args(auth_descriptor) {
    when (auth_descriptor.auth_type) {
        S -> single_sig_args.from_gtv(auth_descriptor.args.to_gtv());
        M -> multi_sig_args.from_gtv(auth_descriptor.args.to_gtv());
    }
}

namespace Unsafe {
    //WARNING: doesn't check that the account is being created by the owner(s)
    function create_account_with_auth(auth_descriptor): account = _create_account_with_auth(auth_descriptor, safe = false);
}

function latest_time() =
    if (op_context.exists and op_context.block_height > 0)
        op_context.last_block_time
    else
        block @ {} (@max .timestamp) ?: 0;

function get_max_allowed_auth_descriptor_rules() = chain_context.args.auth_descriptor.max_rules;
