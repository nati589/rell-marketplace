@mount("ft4")
module;

import ^^.strategies;
import ^^^.accounts;
import ^^^.assets;
import ^^^.crosschain;
import ^^^.utils;

struct module_args_list_element {
    sender_blockchain: gtv;
    sender: gtv;
    recipient: gtv;
    asset: gtv;
    timeout_days: integer;
    strategy: gtv;
}

struct module_args {
    rules: gtv; //list<module_args_list_element>
}

enum account_creation_state {
    pending,
    done
}

entity account_creation_transfer {
    sender_blockchain_rid: byte_array;
    sender_id: byte_array;
    index recipient_id: byte_array;
    assets.asset;
    amount: big_integer;
    rules: byte_array;
    timestamp;
    mutable state: account_creation_state = account_creation_state.pending;
    mutable tx_rid: byte_array = x"";
    mutable op_index: integer = -1;
}

@extend(assets.is_create_on_internal_transfer_enabled)
function() = true;

@extend(assets.create_on_internal_transfer)
function(sender: accounts.account, recipient_id: byte_array, assets.asset, amount: big_integer) {
    assets.Unsafe.transfer(sender, ensure_pool_account(chain_context.blockchain_rid), asset, amount);

    val sender_blockchain_rid = chain_context.blockchain_rid; // internal transfer
    create_on_transfer(sender_blockchain_rid, sender.id, recipient_id, asset, amount);
}

@extend(crosschain.is_create_on_crosschain_transfer_enabled)
function() = true;

@extend(crosschain.create_on_crosschain_transfer)
function(sender_blockchain_rid: byte_array, sender_id: byte_array, recipient_id: byte_array, assets.asset, amount: big_integer) {
    crosschain.Unsafe.update_balances_if_needed(
        crosschain.ensure_blockchain_account(sender_blockchain_rid),
        ensure_pool_account(chain_context.blockchain_rid),
        asset,
        amount
    );

    create_on_transfer(sender_blockchain_rid, sender_id, recipient_id, asset, amount);
}

@extend(strategies.after_register_account)
function(accounts.account) {
    val pool_account = ensure_pool_account(chain_context.blockchain_rid);

    for (account_creation_transfer in
            account_creation_transfer @* { .recipient_id == account.id, .state == account_creation_state.pending }) {
        assets.Unsafe.transfer(
            pool_account,
            account,
            account_creation_transfer.asset,
            account_creation_transfer.amount);

        account_creation_transfer.state = account_creation_state.done;
        account_creation_transfer.tx_rid = op_context.transaction.tx_rid;
        account_creation_transfer.op_index = op_context.op_index;
    }
}

function ensure_pool_account(blockchain_rid: byte_array): accounts.account {
    val pool_account_id = ("POOL" + chain_context.blockchain_rid).hash();
    return accounts.account @? { .id == pool_account_id }
       ?: create accounts.account(id = pool_account_id);
}

function create_on_transfer(
        sender_blockchain_rid: byte_array,
        sender_id: byte_array,
        recipient_id: byte_array,
        assets.asset,
        amount: big_integer) {
    val rules = find_allowed_rules(
        from_chain = sender_blockchain_rid,
        from_id = sender_id,
        to_id = recipient_id,
        asset = asset,
        amount = amount
    );
    require(not rules.empty(), "No suitable transfer strategy found");

    require(empty(account_creation_transfer @* { recipient_id, asset, .state == account_creation_state.pending }),
        "This asset is already transferred");

    create account_creation_transfer(sender_blockchain_rid, sender_id, recipient_id, asset, amount,
        rules = rules.to_gtv().to_bytes(),
        timestamp = accounts.latest_time());
}

function do_transfer(accounts.account, strategy: text) {
    val account_creation_transfers = account_creation_transfer @* { .recipient_id == account.id, .state == account_creation_state.pending };
    require(account_creation_transfers.size() > 0, "No pending transfer to account id <%s>".format(account.id));

    val pool_account = ensure_pool_account(chain_context.blockchain_rid);

    var enough_transferred = false;
    for (account_creation_transfer in account_creation_transfers) {
        assets.Unsafe.transfer(
            pool_account,
            account,
            account_creation_transfer.asset,
            account_creation_transfer.amount);

        account_creation_transfer.state = account_creation_state.done;
        account_creation_transfer.tx_rid = op_context.transaction.tx_rid;
        account_creation_transfer.op_index = op_context.op_index;

        val rules = map<text,rule>.from_gtv(gtv.from_bytes(account_creation_transfer.rules));
        val rule = rules.get_or_null(strategy);
        if (rule != null) {
            val resolved_assets = resolve_allowed_assets(rule);
            if (resolved_assets == null or (account_creation_transfer.asset.id in resolved_assets
                    and account_creation_transfer.amount >= resolved_assets[account_creation_transfer.asset.id])) {
                enough_transferred = true;
            }
        }
    }
    require(enough_transferred, "Insufficient amount of asset transferred");
}

function ensure_fee_account(custom_account_id: byte_array?, blockchain_rid: byte_array): accounts.account {
    if (custom_account_id != null) {
        return accounts.Account(custom_account_id);
    } else {
        val fee_account_id = ("FEE" + chain_context.blockchain_rid).hash();
        return accounts.account @? { .id == fee_account_id }
            ?: create accounts.account(id = fee_account_id);
    }
}
