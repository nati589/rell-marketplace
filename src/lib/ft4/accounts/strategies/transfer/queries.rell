
/**
 *
 * @return `null` if all assets are allowed
 */
query get_allowed_assets(sender_blockchain_rid: byte_array, sender_id: byte_array, recipient_id: byte_array):
        list<(asset_id: byte_array, min_amount: big_integer)>? {
    val rule = find_allowed_assets(sender_blockchain_rid, sender_id, recipient_id);
    if (rule == null) return null;
    val allowed_assets = list<(asset_id: byte_array, min_amount: big_integer)>();
    for ((asset_id, min_amount) in rule) {
        allowed_assets.add((asset_id = asset_id, min_amount = min_amount));
    }
    return allowed_assets;
}

query get_pending_transfer_strategies(recipient_id: byte_array): set<text> {
    val strategies2 = account_creation_transfer @* { recipient_id, .state == account_creation_state.pending }
        (map<text,rule>.from_gtv(gtv.from_bytes(.rules)).keys());
    val strategies = set<text>();
    for (s in strategies2) {
        strategies.add_all(s);
    }
    return strategies;
}

query has_pending_create_account_transfer_for_strategy(
    strategy_name: text,  
    sender_blockchain_rid: byte_array,
    sender_id: byte_array,
    recipient_id: byte_array,
    asset_id: byte_array,
    amount: big_integer
) {
    val transfers = account_creation_transfer @* {
        .recipient_id == recipient_id,
        .sender_blockchain_rid == sender_blockchain_rid,
        .sender_id == sender_id,
        .asset.id == asset_id,
        .amount == amount,
        .state == account_creation_state.pending
    };

    for (transfer in transfers) {
        val rules = map<text, rule>.from_gtv(gtv.from_bytes(transfer.rules));
        
        if (not (strategy_name in rules)) continue;
        val rule = rules[strategy_name];

        if (
            is_blockchain_allowed(rule, sender_blockchain_rid) and
            is_sender_allowed(rule, sender_id) and
            is_recipient_allowed(rule, sender_id, recipient_id) and
            is_asset_amount_allowed(rule, transfer.asset, amount)
        ) {
            return true;
        }
    }

    return false;
} 