import ^.assets;
import ^.accounts;

entity applied_transfers { 
    key tx_rid, op_index; 
    tx_rid: byte_array;
    op_index: integer;
}

entity pending_transfer {
    key transaction, op_index; 
    op_index: integer;
    index sender: accounts.account;
}

namespace Unsafe {

    function update_balances_if_needed(
        sender: accounts.account,
        recipient: accounts.account,
        assets.asset,
        amount: big_integer
    ) {
        require(
            sender != recipient,
            "Cannot transfer to own account"
        );
        require(
            chain_context.blockchain_rid != sender.id,
            "Cannot transfer from this blockchain's account"
        );
        require(
            chain_context.blockchain_rid != recipient.id,
            "Cannot transfer to this blockchain's account"
        );
        assets.require_zero_exclusive_asset_amount_limits(
            amount,
            "Parameter amount"
        );

        val origin_blockchain_rid = asset_origin @? { asset } .origin_blockchain_rid;
        val is_sender_blockchain = exists(blockchain_account @? { sender });
        val is_recipient_blockchain = exists(blockchain_account @? { recipient });
        
        if (
            not exists(origin_blockchain_rid)
            or not is_sender_blockchain
            or origin_blockchain_rid != sender.id
        ) {
            assets.deduct_balance(
                sender,
                asset, 
                amount
            );
        }

        create assets.transfer_history_entry(
            .account = sender,
            .asset = asset,
            .delta = amount,
            .op_index = op_context.op_index,
            .is_input = true
        );

        if (
            not exists(origin_blockchain_rid)
            or not is_recipient_blockchain
            or origin_blockchain_rid != recipient.id
        ) {
            assets.increase_balance(recipient, asset, amount);
        }

        create assets.transfer_history_entry(
            .account = recipient,
            .asset = asset,
            .delta = amount,
            .op_index = op_context.op_index,
            .is_input = false
        );
    }
}
