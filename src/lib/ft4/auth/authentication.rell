/**
 * This function can be extended by users to add custom logic before authentication.
 */
@extendable
function before_authenticate(accounts.account, accounts.account_auth_descriptor);

/**
 * This function can be extended by users to add custom logic after authentication.
 */
@extendable
function after_authenticate(accounts.account, accounts.account_auth_descriptor?);

val EVM_AUTH_OP = "ft4.evm_auth";
val FT_AUTH_OP = "ft4.ft_auth";

function authenticate(is_strict: boolean = true) {
    val op = op_context.get_all_operations()[op_context.op_index];
    require(op_context.op_index > 0, "Expected at least two operations, make sure that you included auth operation.");

    val previous_op = op_context.get_all_operations()[op_context.op_index - 1];
    require(
        is_auth_op(previous_op),
        "Error authenticating operation. Incorrect auth operation %s".format(previous_op.name)
    );

    val (account, auth_descriptor) = fetch_account_and_auth_descriptor(previous_op.args);
    require(
        get_first_allowed_auth_descriptor(op.name, op.args.to_gtv(), account.id, [auth_descriptor.id], is_strict),
        "The provided auth descriptor is not valid for this operation"
    );
    before_authenticate(account, auth_descriptor);

    accounts.rate_limit(account);

    require(not accounts.have_violating_rules(auth_descriptor), "The rules for this auth descriptor have been violated");

    val flags = get_auth_flags(op.name, is_strict);

    when (previous_op.name) {
        EVM_AUTH_OP -> _validate_evm_signature(op, previous_op, is_strict, flags, account, auth_descriptor);
        FT_AUTH_OP -> _validate_ft4_signature(flags, account, auth_descriptor);
        else -> require(false, "Invalid auth operation: %s".format(previous_op.name));
    };

    val auth_desc_after = accounts.update_auth_descriptor_rule_variables(auth_descriptor);
    val deleted_descriptors = accounts.delete_expired_auth_descriptors(account);

    after_authenticate(account, if (auth_desc_after in deleted_descriptors) null else auth_desc_after);

    return account;
}

function get_first_allowed_auth_descriptor_by_signers(op_name: name, args: gtv, account_id: byte_array, signers: list<byte_array>, is_strict: boolean) {
    val ads = accounts.auth_descriptor_signer @* {
        .account_auth_descriptor.account.id == account_id,
        .id in signers
    } (.account_auth_descriptor);

    val flags = get_auth_flags(op_name, is_strict);

    val valid_ad_ids = ads @* { accounts.has_flags($, flags) } (.id);

    return get_first_allowed_auth_descriptor(op_name, args, account_id, valid_ad_ids, is_strict);
}

function get_first_allowed_auth_descriptor(op_name: name, args: gtv, account_id: byte_array, ad_ids: list<byte_array>, is_strict: boolean) {
    if (ad_ids.size() == 0) return null;

    val resolver = get_auth_handler(op_name, is_strict=false).resolver;
    if (resolver == null) return ad_ids[0];
  
    return resolver(args, account_id, ad_ids);
}

function _ft_auth(required_flags: list<text>, account: accounts.account, auth_descriptor: accounts.account_auth_descriptor) {
    accounts.rate_limit(account);

    require(not accounts.have_violating_rules(auth_descriptor), "The rules for this auth descriptor have been violated");

    _validate_ft4_signature(required_flags, account, auth_descriptor);

    accounts.update_auth_descriptor_rule_variables(auth_descriptor);
    accounts.delete_expired_auth_descriptors(account);
}

function fetch_account_and_auth_descriptor(auth_args: list<gtv>): (accounts.account, accounts.account_auth_descriptor) {
    val (account_id, auth_descriptor_id) = extract_account_and_auth_descriptor(auth_args);
    val account = accounts.Account(account_id);
    val auth_descriptor = require(
        try_fetch_auth_descriptor(account, auth_descriptor_id),
        "Auth descriptor '%s' not found for account '%s'".format(auth_descriptor_id, account_id)
    );
    return (account, auth_descriptor);
}

function extract_account_and_auth_descriptor(auth_args: list<gtv>): (byte_array, byte_array) {
    val account_id = byte_array.from_gtv(auth_args[0]);
    val auth_descriptor_id = byte_array.from_gtv(auth_args[1]);
    return (account_id, auth_descriptor_id);
}

function try_fetch_auth_descriptor(accounts.account, auth_descriptor_id: byte_array): accounts.account_auth_descriptor? =
    accounts.account_auth_descriptor @? { .id == auth_descriptor_id, .account == account };

function get_auth_flags(op_name: name, is_strict: boolean) = get_auth_handler(op_name, is_strict).flags;

function get_auth_message_template(op_name: name, op_args: gtv, is_strict: boolean) {
    val formatter = get_auth_handler(op_name, is_strict).message_formatter;

    val message = if (formatter??) formatter(op_args) else generate_operation_auth_message(chain_context.blockchain_rid, gtx_operation(
        name = op_name,
        args = list<gtv>.from_gtv(op_args)
    ));

    return utils.make_auth_message(message);
}

function _validate_evm_signature(
  op: gtx_operation,
  auth_op: gtx_operation,
  is_strict: boolean,
  flags: list<text>,
  account: accounts.account,
  auth_descriptor: accounts.account_auth_descriptor
) {
    val message_template = get_auth_message_template(op.name, op.args.to_gtv(), is_strict);
    val validated_args = _validate_evm_arguments(auth_op.args, set(flags), account, auth_descriptor);
    val message = create_message_from_template(
        validated_args, 
        message_template, 
        op.args, 
        auth_descriptor.ctr
    );

    if (auth_descriptor.auth_type == accounts.auth_type.S)
        _validate_evm_address(message, validated_args.signatures[0], auth_descriptor);
    else
        _validate_multiple_evm_addresses(message, validated_args.signatures, auth_descriptor);
}

function create_message_from_template(accounts.evm_auth_args, message_template: text, args: list<gtv>, ctr: integer): text {
    require(message_template.contains("{nonce}"), "Message template has to include '{nonce}'");
    require(message_template.contains("{blockchain_rid}"), "Message template has to include '{blockchain_rid}'");
    var message = message_template;
    
    // TODO: check if this is still needed
    for (i in range(args.size())) {
        message = message.replace("{%d}".format(i), "%s".format(args[i]).replace("\"", ""));
    }
    
    return message
        .replace("{account_id}", evm_auth_args.account.id.to_hex())
        .replace("{auth_descriptor_id}", evm_auth_args.account_auth_descriptor.id.to_hex())
        .replace("{nonce}", ctr.to_text().replace("\"", ""))
        .replace("{blockchain_rid}", chain_context.blockchain_rid.to_hex());
}

function _validate_evm_arguments(
  auth_args: list<gtv>,
  required_flags: set<text>,
  account: accounts.account, 
  auth_descriptor: accounts.account_auth_descriptor
): accounts.evm_auth_args {
    require(auth_args.size() == 3, "Incorrect number of arguments to auth operation");

    val signatures = list<signature>.from_gtv(auth_args[2]);

    val has_all_flags = accounts.has_flags(auth_descriptor, list(required_flags));
    
    require(has_all_flags, "The auth descriptor does not have the required permissions");

    return accounts.evm_auth_args(account, auth_descriptor, signatures);
}

function _validate_ft4_signature(
  flags: list<text>,
  account: accounts.account,
  auth_descriptor: accounts.account_auth_descriptor
) {
   	val result: utils.validation_result = accounts.check_auth_args(
          		auth_descriptor.auth_type,
          		auth_descriptor.args,
                accounts.get_signers(auth_descriptor.auth_type, auth_descriptor.args),
          		flags
   	);

    require(result.valid, result.error!!); // Prints a precise error message.
}

function _recover_evm_address(message: text, signature) {
    require(message != "", "Empty messages are not allowed");

    val msg_hash = _evm_message_hash(message);
    val evm_pubkey = crypto.eth_ecrecover(
        signature.r,
        signature.s,
        signature.v - 27,
        msg_hash
    );
    
    return crypto.eth_pubkey_to_address(evm_pubkey);
}

function _evm_message_hash(message: text): byte_array =
    keccak256(("\u0019Ethereum Signed Message:\n" + message.size().to_text() + message).to_bytes());

function _validate_evm_address(message: text, signature, accounts.account_auth_descriptor) {
    val recovered_address = _recover_evm_address(message, signature);
    val signer = accounts.auth_descriptor_signer @? {
        .account_auth_descriptor == account_auth_descriptor,
        .id == recovered_address
    };
    require(signer, "Invalid signature on message: \n%s".format(message));

    return recovered_address;
}

function _validate_multiple_evm_addresses(message: text, signatures: list<signature>, accounts.account_auth_descriptor) {
    val recovered_keys = list<byte_array>();
    for (i in range(signatures.size())) {
        recovered_keys.add(
            _validate_evm_address(
                message,
                signatures[i],
                account_auth_descriptor
            )
        );
    }
    require(
        recovered_keys.size() >= accounts.multi_sig_args.from_bytes(account_auth_descriptor.args).signatures_required, 
        "Minimum number of valid signatures not reached"
    );
    return recovered_keys;
}

function extract_account_id(auth_op: gtx_operation): byte_array {
    require(is_auth_op(auth_op), "Operation %s is not an auth operation".format(auth_op.name));
    require(auth_op.args.size() >= 1, "Invalid auth op, insufficient number of args: %s".format(auth_op.args.size()));
    return byte_array.from_gtv(auth_op.args[0]);
}

function is_auth_op(op: gtx_operation) = op.name in [EVM_AUTH_OP, FT_AUTH_OP];
