@test
module;

import ^^.accounts;
import auth_ext: ^^.auth.external;
import ^^.auth.{ signature };
import ^^.auth.external.{ get_auth_message_template };
import ^^.accounts.{ evm_auth_args };
import ^^.auth. { create_message_from_template, _evm_message_hash };

/*
 * Creates an ft_auth operation for a specific signer.
 * If more than one auth_desciptor exists for the signer, first one found is chosen.
 */
function ft_auth_operation_for(signer: byte_array) {
    val descriptor = require(
        accounts.auth_descriptor_signer @? { signer }.account_auth_descriptor limit 1,
        "No auth descriptor found for signer %s".format(signer)
    );

    return auth_ext.ft_auth(descriptor.account.id, descriptor.id);
}

/*
 * Creates an evm_auth operation by signing an operation using [evm_sign].
 * The associated account is derived from the evm privkey. If more than one auth_descriptor exists the first one will be chosen.
 */
function evm_auth_operation_for(evm_privkey: byte_array, op: rell.test.op) {
    val evm_address = crypto.eth_privkey_to_address(evm_privkey);
    val descriptor = require(
        accounts.auth_descriptor_signer @? { evm_address }.account_auth_descriptor limit 1,
        "No auth descriptor found for address %s".format(evm_address)
    );
    val evm_message = create_message_from_template(
        evm_auth_args(
            account = descriptor.account,
            descriptor,
            signatures = []
        ),
        get_auth_message_template(op.name, op.args.to_gtv()),
        op.args,
        descriptor.ctr
    );
    val evm_signature = evm_sign(evm_message, evm_privkey);
    return auth_ext.evm_auth(descriptor.account.id, descriptor.id, [evm_signature]);
}

/*
 * Signs a message using an evm key.
 */
function evm_sign(message: text, evm_privkey: byte_array): signature {
    val sig = crypto.eth_sign(
            _evm_message_hash(message),
            evm_privkey
        );

    return signature(
        r=sig[0],
        s=sig[1],
        v=sig[2] + 27
    );
}
